package principal;

import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Random;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;

/**
 *
 * @author Martha
 */
public class Inicio extends javax.swing.JFrame {

    private char tablero[];
    ArrayList<JLabel> botones = new ArrayList<>();
    public char HUMANO = '3';
    public char COMPUTADORA = '2';
    int HumanoWin = 0;
    int ComputadoraWin = 0;
    int win;

    public Inicio() {
        setUndecorated(true);

        initComponents();
        setLocationRelativeTo(this);

        ajustar("/imagenes/fondo.png", jLabel2);
        ajustar("/imagenes/juego.png", lblJuego);

        seleccionar.accept(lblX);

        botones.add(casilla1);
        botones.add(casilla2);
        botones.add(casilla3);
        botones.add(casilla4);
        botones.add(casilla5);
        botones.add(casilla6);
        botones.add(casilla7);
        botones.add(casilla8);
        botones.add(casilla9);

        panelJuego.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblsalir = new javax.swing.JLabel();
        lblO = new javax.swing.JLabel();
        lblJugar = new javax.swing.JLabel();
        lblX = new javax.swing.JLabel();
        panelJuego = new javax.swing.JPanel();
        marcadorC = new javax.swing.JLabel();
        casilla1 = new javax.swing.JLabel();
        casilla2 = new javax.swing.JLabel();
        casilla4 = new javax.swing.JLabel();
        casilla5 = new javax.swing.JLabel();
        casilla7 = new javax.swing.JLabel();
        casilla8 = new javax.swing.JLabel();
        casilla3 = new javax.swing.JLabel();
        casilla6 = new javax.swing.JLabel();
        casilla9 = new javax.swing.JLabel();
        marcadorH = new javax.swing.JLabel();
        lblEstado = new javax.swing.JLabel();
        lblreiniciar = new javax.swing.JLabel();
        lblJuego = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblsalir.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblsalir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblsalirMouseClicked(evt);
            }
        });
        getContentPane().add(lblsalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 0, 50, 50));

        lblO.setBackground(new java.awt.Color(153, 204, 255));
        lblO.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblOMouseClicked(evt);
            }
        });
        getContentPane().add(lblO, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 270, 70, 80));

        lblJugar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblJugar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblJugarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblJugarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblJugarMouseExited(evt);
            }
        });
        getContentPane().add(lblJugar, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 390, 100, 50));

        lblX.setBackground(new java.awt.Color(153, 204, 255));
        lblX.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblX.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblXMouseClicked(evt);
            }
        });
        getContentPane().add(lblX, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 270, 70, 80));

        panelJuego.setOpaque(false);
        panelJuego.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        marcadorC.setFont(new java.awt.Font("DK Crayonista", 1, 60)); // NOI18N
        marcadorC.setForeground(new java.awt.Color(255, 255, 255));
        panelJuego.add(marcadorC, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 90, 142, 36));

        casilla1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla1, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 43, 66, 76));

        casilla2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla2, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 43, 66, 76));

        casilla4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla4, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 137, 66, 76));

        casilla5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla5, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 137, 66, 76));

        casilla7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla7, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 231, 66, 76));

        casilla8.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla8, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 231, 66, 76));

        casilla3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla3, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 43, 66, 76));

        casilla6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla6, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 137, 66, 76));

        casilla9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        panelJuego.add(casilla9, new org.netbeans.lib.awtextra.AbsoluteConstraints(186, 231, 66, 76));

        marcadorH.setFont(new java.awt.Font("DK Crayonista", 1, 60)); // NOI18N
        marcadorH.setForeground(new java.awt.Color(255, 255, 255));
        panelJuego.add(marcadorH, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 230, 142, 36));

        lblEstado.setFont(new java.awt.Font("DK Crayonista", 1, 24)); // NOI18N
        lblEstado.setForeground(new java.awt.Color(255, 255, 0));
        lblEstado.setToolTipText("");
        lblEstado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblEstado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblEstadoMousePressed(evt);
            }
        });
        panelJuego.add(lblEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 325, 430, 40));

        lblreiniciar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblreiniciar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lblreiniciarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lblreiniciarMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblreiniciarMousePressed(evt);
            }
        });
        panelJuego.add(lblreiniciar, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 300, 130, 60));
        panelJuego.add(lblJuego, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 21, 570, 330));

        getContentPane().add(panelJuego, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 113, -1, 380));
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, -10, 950, 530));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblXMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblXMouseClicked
        seleccionar.accept(lblX);

        desseleccionar.accept(lblO);

        HUMANO = '3';
        COMPUTADORA = '2';
    }//GEN-LAST:event_lblXMouseClicked

    private void lblOMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblOMouseClicked

        seleccionar.accept(lblO);

        desseleccionar.accept(lblX);

        HUMANO = '2';
        COMPUTADORA = '3';

    }//GEN-LAST:event_lblOMouseClicked

    private void lblJugarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblJugarMouseEntered

        seleccionar.accept(lblJugar);

    }//GEN-LAST:event_lblJugarMouseEntered

    private void lblJugarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblJugarMouseExited

        desseleccionar.accept(lblJugar);

    }//GEN-LAST:event_lblJugarMouseExited

    private void lblJugarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblJugarMouseClicked
        desactivar(lblO);
        desactivar(lblX);
        desactivar(lblJugar);
        desseleccionar.accept(lblJugar);
        iniciarJuego();
        panelJuego.setVisible(true);

    }//GEN-LAST:event_lblJugarMouseClicked

    private void lblEstadoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEstadoMousePressed
        if (lblEstado.getText().contains("continuar")) {
            agregarEventos();
            iniciarJuego();
            mostrarTablero();
        }
    }//GEN-LAST:event_lblEstadoMousePressed

    private void lblreiniciarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblreiniciarMouseEntered
        seleccionar.accept(lblreiniciar);
    }//GEN-LAST:event_lblreiniciarMouseEntered

    private void lblreiniciarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblreiniciarMouseExited
        desseleccionar.accept(lblreiniciar);
    }//GEN-LAST:event_lblreiniciarMouseExited

    private void lblreiniciarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblreiniciarMousePressed

        reiniciarJuego();


    }//GEN-LAST:event_lblreiniciarMousePressed

    private void lblsalirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblsalirMouseClicked
        System.exit(0);

    }//GEN-LAST:event_lblsalirMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Inicio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Inicio().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel casilla1;
    private javax.swing.JLabel casilla2;
    private javax.swing.JLabel casilla3;
    private javax.swing.JLabel casilla4;
    private javax.swing.JLabel casilla5;
    private javax.swing.JLabel casilla6;
    private javax.swing.JLabel casilla7;
    private javax.swing.JLabel casilla8;
    private javax.swing.JLabel casilla9;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblJuego;
    private javax.swing.JLabel lblJugar;
    private javax.swing.JLabel lblO;
    private javax.swing.JLabel lblX;
    private javax.swing.JLabel lblreiniciar;
    private javax.swing.JLabel lblsalir;
    private javax.swing.JLabel marcadorC;
    private javax.swing.JLabel marcadorH;
    private javax.swing.JPanel panelJuego;
    // End of variables declaration//GEN-END:variables

    public void iniciarJuego() {
        tablero = new char[]{' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '};
        int turno = new Random().nextInt(2);

        if (turno == 1) {
            jugarComputadora();

            ActionListener taskPerformer = accion -> {
                mostrarTablero();
                mostrarMarcador();
                mensaje.accept("Es tu turno...", lblEstado);
                agregarEventos();
            };
            esperar.accept(taskPerformer);

        } else {
            mostrarTablero();
            mostrarMarcador();

            mensaje.accept("Es tu turno...", lblEstado);

            agregarEventos();

        }

    }
    
    //Mètodo que obtiene la jugada de la computadora
    // basado en las reglas que permiten un juego optimo
    // del gato
    private void jugarComputadora() {

        mensaje.accept("Computadora jugando...", lblEstado);
        System.out.println("---------- IA JUGANDO -------  ");

        //GANAR
        if (dosEnLinea(COMPUTADORA) >= 0) {
            System.out.println("GANANDO");
            jugarEn.accept(dosEnLinea(COMPUTADORA));
            return;
        }

        //BLOQUEAR
        if (dosEnLinea(HUMANO) >= 0) {
            System.out.println("BLOQUEANDO");
            jugarEn.accept(dosEnLinea(HUMANO));
            return;
        }

        //CAPTURAR
        if (capturar(COMPUTADORA) > 0) {
            System.out.println("CAPTURANDO");
            jugarEn.accept(capturar(COMPUTADORA));
            return;
        }

        //BLOQUEAR CAPTURA
        if (capturar(HUMANO) > 0) {
            System.out.println("BLOQUEANDO CAPTURA");
            jugarEn.accept(capturar(HUMANO));
            return;
        }

        //CENTRO
        if (centroLibre()) {
            jugarCentro();
            return;
        }

        //ESQUINA OPUESTA
        if (esquinaOpuesta() >= 0) {
            System.out.println("ESQUINA OPUESTA");
            jugarEn.accept(esquinaOpuesta());
            return;
        }

        //ESQUINA VACIA
        if (esquinaLibre() >= 0) {
            System.out.println("ESQUINA VACIA");
            jugarEn.accept(esquinaLibre());
            return;
        }

        //LADO VACIO        
        if (ladoVacio() > 0) {
            System.out.println("LADO VACIO");
            jugarEn.accept(ladoVacio());
        }

    }

    //Mètodo que verifica si el jugador indicado tiene dos en linea
    public int dosEnLinea(char player) {
        for (int i = 0; i < botones.size(); i++) {
            if (tablero[i] != HUMANO && tablero[i] != COMPUTADORA) {
                char curr = tablero[i];
                tablero[i] = player;
                if (revisarVictoria() == Integer.parseInt(player + "")) {
                    tablero[i] = curr;
                    return i;
                } else {
                    tablero[i] = curr;
                }
            }
        }
        return -1;
    }

    //Mètodo que realiza la jugada
    // en el centro del tablero
    public void jugarCentro() {
        tablero[4] = COMPUTADORA;
    }

    // Verifica si el centro esta libre
    public boolean centroLibre() {
        if (tablero[4] == ' ') {
            return true;
        }
        return false;
    }

    //Comprueba si hay algun lado vacìo
    // retorna la posicion de este
    public int ladoVacio() {
        if (tablero[1] == ' ') {
            return 1;
        }
        if (tablero[3] == ' ') {
            return 3;
        }
        if (tablero[5] == ' ') {
            return 5;
        }
        if (tablero[7] == ' ') {
            return 7;
        }
        return -1;
    }

    //Verifica si el humano jugo en alguna esquina
    // retorna la posicion de la esquina opuesta si esta libre
    public int esquinaOpuesta() {
        if (tablero[0] == HUMANO && tablero[8] == ' ') {
            return 8;
        }
        if (tablero[8] == HUMANO && tablero[0] == ' ') {
            return 0;
        }
        if (tablero[2] == HUMANO && tablero[6] == ' ') {
            return 6;
        }
        if (tablero[6] == HUMANO && tablero[2] == ' ') {
            return 2;
        }
        return -1;
    }

    //verifica si hay alguna esquina libre
    public int esquinaLibre() {
        if (tablero[0] == ' ') {
            return 0;
        }
        if (tablero[2] == ' ') {
            return 2;
        }
        if (tablero[6] == ' ') {
            return 6;
        }
        if (tablero[8] == ' ') {
            return 8;
        }

        return -1;
    }

    //Método que verifica si algun jugador ha ganado
    private int revisarVictoria() {
        // horizontales
        for (int i = 0; i <= 6; i += 3) {
            if (tablero[i] == HUMANO
                    && tablero[i + 1] == HUMANO
                    && tablero[i + 2] == HUMANO) {
                return Integer.parseInt(HUMANO + "");
            }
            if (tablero[i] == COMPUTADORA
                    && tablero[i + 1] == COMPUTADORA
                    && tablero[i + 2] == COMPUTADORA) {
                return Integer.parseInt(COMPUTADORA + "");

            }
        }
        // verticales
        for (int i = 0; i <= 2; i++) {
            if (tablero[i] == HUMANO
                    && tablero[i + 3] == HUMANO
                    && tablero[i + 6] == HUMANO) {
                return Integer.parseInt(HUMANO + "");

            }
            if (tablero[i] == COMPUTADORA
                    && tablero[i + 3] == COMPUTADORA
                    && tablero[i + 6] == COMPUTADORA) {
                return Integer.parseInt(COMPUTADORA + "");

            }
        }
        // diagonales
        if ((tablero[0] == HUMANO
                && tablero[4] == HUMANO
                && tablero[8] == HUMANO)
                || (tablero[2] == HUMANO
                && tablero[4] == HUMANO
                && tablero[6] == HUMANO)) {
            return Integer.parseInt(HUMANO + "");
        }
        if ((tablero[0] == COMPUTADORA
                && tablero[4] == COMPUTADORA
                && tablero[8] == COMPUTADORA)
                || (tablero[2] == COMPUTADORA
                && tablero[4] == COMPUTADORA
                && tablero[6] == COMPUTADORA)) {
            return Integer.parseInt(COMPUTADORA + "");
        }

        for (int i = 0; i < botones.size(); i++) {
            //si alguno esta libre nadie ha ganado
            if (tablero[i] != HUMANO && tablero[i] != COMPUTADORA) {
                return 0;
            }
        }
        // empate
        return 1;
    }

    //Método que retorna la posicion del tablero que permite
    // crear una jugada donde el jugador indicado pueda capturar
    public int capturar(char player) {
        for (int i = 0; i < botones.size(); i++) {
            if (tablero[i] != HUMANO && tablero[i] != COMPUTADORA) {
                char curr = tablero[i];
                tablero[i] = player;
                int dos = cuentaDosEnLinea(player);
                if (dos > 1) {
                    tablero[i] = curr;
                    return i;
                } else {
                    tablero[i] = curr;
                }
            }
        }
        return -1;
    }

    // Método que cuenta las posibles victorias que 
    // tiene el jugador indicado, dato necesario para
    // las reglas de captura y bloquear captura
    public int cuentaDosEnLinea(char player) {
        int cont = 0;
        for (int i = 0; i < botones.size(); i++) {
            if (tablero[i] != HUMANO && tablero[i] != COMPUTADORA) {
                char curr = tablero[i];
                tablero[i] = player;
                if (revisarVictoria() == Integer.parseInt(player + "")) {
                    tablero[i] = curr;
                    cont++;
                } else {
                    tablero[i] = curr;
                }
            }
        }
        return cont;
    }

    private void mostrarMarcador() {
        String s = "";

        for (int i = 0; i < ComputadoraWin; i++) {
            s += "|";
        }

        mensaje.accept(s, marcadorC);

        s = "";
        for (int i = 0; i < HumanoWin; i++) {
            s += "|";
        }

        mensaje.accept(s, marcadorH);

    }

    private void reiniciarJuego() {
        eventoXO();
        ComputadoraWin = 0;
        HumanoWin = 0;
        panelJuego.setVisible(false);

    }

    public void jugar(MouseEvent evt) {
        int pos = botones.indexOf((JLabel) evt.getComponent()) + 1;
        tablero[pos - 1] = HUMANO;
        mostrarTablero();
        win = revisarVictoria();
        avisar(win);
        if (win != 0) {
            return;
        }
        jugarComputadora();

        ActionListener taskPerformer = accion -> {
            mensaje.accept("Es tu turno...", lblEstado);
            mostrarTablero();
            win = revisarVictoria();
            avisar(win);
        };
        esperar.accept(taskPerformer);

    }

    public void avisar(int a) {
        if (a == Integer.parseInt(HUMANO + "")) {

            mensaje.accept("Ganaste, click aquí para continuar.", lblEstado);

            HumanoWin++;

            desactivarTablero.accept(botones);

            Toolkit.getDefaultToolkit().beep();
        }

        if (a == Integer.parseInt(COMPUTADORA + "")) {

            mensaje.accept("Computadora ganó, click aquí para continuar.", lblEstado);

            desactivarTablero.accept(botones);
            ComputadoraWin++;
            Toolkit.getDefaultToolkit().beep();
        }
        if (a == 1) {

            mensaje.accept("Empate, click aquí para continuar.", lblEstado);

            desactivarTablero.accept(botones);
            Toolkit.getDefaultToolkit().beep();
        }
        mostrarMarcador();
    }

    private void mostrarTablero() {

        for (int i = 0; i < botones.size(); i++) {
            if (tablero[i] == HUMANO) {
                ajustar("/imagenes/a" + HUMANO + ".png", botones.get(i));
                desactivar((JLabel) botones.get(i));
            } else if (tablero[i] == COMPUTADORA) {
                ajustar("/imagenes/a" + COMPUTADORA + ".png", botones.get(i));
                desactivar((JLabel) botones.get(i));
            } else {
                ajustar("", (JLabel) botones.get(i));
            }
        }

    }

    private void desactivar(JLabel lbl) {
        MouseListener[] mListener = lbl.getMouseListeners();
        for (MouseListener ml : mListener) {
            lbl.removeMouseListener(ml);
        }
    }

    public void eventoXO() {

        lblX.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                seleccionar.accept(lblX);
                desseleccionar.accept(lblO);
                HUMANO = '3';
                COMPUTADORA = '2';
            }
        });

        lblO.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                seleccionar.accept(lblO);
                desseleccionar.accept(lblX);
                HUMANO = '2';
                COMPUTADORA = '3';

            }
        });

        lblJugar.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                panelJuego.setVisible(true);
                desactivar(lblO);
                desactivar(lblX);
                desactivar(lblJugar);
                desseleccionar.accept(lblJugar);
                iniciarJuego();

            }

            public void mouseEntered(MouseEvent e) {
                seleccionar.accept(lblJugar);
            }

            public void mouseExited(MouseEvent e) {
                desseleccionar.accept(lblJugar);

            }
        });

    }

    public void ajustar(String path, JLabel label) {
        ImageIcon fot = new ImageIcon(getClass().getResource(path));
        Icon icono = new ImageIcon(fot.getImage().getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_DEFAULT));
        label.setIcon(icono);
    }

    // **************** FUNCIONES LAMBDA ****************//
    // Funcion lambda de tipo  BiConsumer la cual recibe el mensaje (msg)
    // que se mostrara en el JLabel indicado (lbl)
    BiConsumer<String, JLabel> mensaje = (msg, lbl) -> lbl.setText(msg);

    // Funcion lambda de tipo Consumer que recibe un objeto ActionListener
    // el cual se iniciará con una espera de 1000ms
    // ( simula la jugada de la computadora con retraso de 1s )
    Consumer<ActionListener> esperar = x -> {
        javax.swing.Timer t = new javax.swing.Timer(1000, x);
        t.setRepeats(false);
        t.start();
    };

    // Funcion lambda de tipo Consumer que recibe un numero entero
    // que indica el lugar en que la computadora hará su jugada
    Consumer<Integer> jugarEn = x -> tablero[x] = COMPUTADORA;

    // Funciones lambda de tipo Consumer que ajustan la imagen dada a un JLabel
    Consumer<JLabel> seleccionar = x -> ajustar("/imagenes/raya.png", x);
    Consumer<JLabel> desseleccionar = x -> ajustar("", x);

    // Funcion lambda de tipo Consumer que recibe un ArrayList de tipo JLabel
    // para recorrerlo usando otra funcion lambda y desactivar cada uno de 
    // las casillas del tablero
    Consumer<ArrayList<JLabel>> desactivarTablero = tablero -> {
        tablero.forEach(b -> desactivar(b));
    };

    // Método que recorre el ArrayList botones utilizando una función Lambda
    // con el fin de agregar el evento jugar a cada una de las casillas del tablero
    public void agregarEventos() {
        botones.forEach(b -> {
            desactivar(b);
            b.addMouseListener(new MouseAdapter() {
                public void mousePressed(MouseEvent e) {
                    jugar(e);
                }
            });
        });

    }
}
